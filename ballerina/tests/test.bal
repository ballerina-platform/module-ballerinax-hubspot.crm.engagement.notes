// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/io;
import ballerina/http;
import ballerina/test;
import ballerina/oauth2;

configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string refreshToken = ?;

// ID of the test company created for testing
configurable string companyId = ?;

OAuth2RefreshTokenGrantConfig auth = {
    clientId,
    clientSecret,
    refreshToken,
    credentialBearer: oauth2:POST_BODY_BEARER // This line should be added when you are going to create auth object.
};

// configurable http:BearerTokenConfig & readonly authConfig = ?;
// ConnectionConfig config = {auth : authConfig};

ConnectionConfig config = {auth : auth};

final Client baseClient = check new Client(config, serviceUrl = "https://api.hubapi.com/crm/v3/objects/notes");

@test:Config {}
isolated function  testPost_batch_read_read() {
    test:assertTrue(1 == 1);
}

@test:Config {}
isolated function  testPost_batch_upsert_upsert() {
    test:assertTrue(1 == 1);
}

@test:Config {}
isolated function  testPost_search_doSearch() returns error?{
    PublicObjectSearchRequest payload1 =
    {
        filterGroups:[{
            filters: [{
                propertyName: "hs_note_body",
                value: "Hello",
                operator: "EQ"
            }]
        }]
    };

    CollectionResponseWithTotalSimplePublicObjectForwardPaging response = check baseClient->/search.post(payload1);
    test:assertTrue(response.results.length() > 0);

    PublicObjectSearchRequest payload2 =
    {
        filterGroups:[{
            filters: [{
                propertyName: "hs_note_body",
                value: "Not Hello",
                operator: "EQ"
            }]
        }]
    };

    response = check baseClient->/search.post(payload2);
    test:assertTrue(response.results.length() == 0);
}

@test:Config {}
isolated function  testPost_batch_update_update() {
    test:assertTrue(1 == 1);
}

@test:Config {}
isolated function  testPost_batch_create_create() {
    test:assertTrue(1 == 1);
}

@test:Config {}
isolated function  testPost_batch_archive_archive() {
    test:assertTrue(1 == 1);
}

@test:Config {}
isolated function  testGet_getById() returns error? {
    string noteId = "68259592091";
    SimplePublicObjectWithAssociations response = check baseClient->/[noteId]();
    test:assertTrue(response.id != "");
}

@test:Config {}
isolated function  testPatch_update() returns error? {
    string noteId = "68292461628";

    SimplePublicObjectInput payload =
    {
        properties: {
            "hs_note_body": "Greetings"
        }
    };

    SimplePublicObject response = check baseClient->/[noteId].patch(payload);
    test:assertTrue(response.id == noteId);
}

@test:Config {}
isolated function  testDelete_archive() returns error? {
    string noteId = "68301768259";
    http:Response response = check baseClient->/[noteId].delete();
    test:assertTrue(response.statusCode == 204);
}

@test:Config {}
isolated function  testGet_notes_getPage() returns error? {
    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging response = check baseClient->/();
    io:print(response.results);
    test:assertTrue(response.results.length() > 0);
}

@test:Config {}
isolated function  testPost_notes_create() returns error?{
    SimplePublicObjectInputForCreate payload = 
    {
        associations: [{
        types: [{
            associationCategory: "HUBSPOT_DEFINED",
            associationTypeId: 190
            }],
        to: {
            id: companyId
        }
    }],
        properties: {
            "hs_timestamp": "2024-01-06T10:18:22Z",
            "hs_note_body": "Hello"
            // "hubspot_owner_id": "48579884"
            // "hs_attachment_ids": "1234; 5678"
        }
    };

    SimplePublicObject response = check baseClient->/.post(payload);
    test:assertTrue(response.createdAt != "");
}
